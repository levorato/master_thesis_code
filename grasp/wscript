import os
from waflib import Options
from waflib.Errors import WafError

APPNAME = 'graspcc'
VERSION = '1.0'

top = '.'
out = 'build'

def dist(ctx):
        ctx.algo      = 'tar.bz2'
        ctx.excl      = ' **/*~ **/*.swp **/.lock-w* **/.git build Debug'


def options(opt):
#	opt.load('compiler_c')
	opt.load('compiler_cxx')
	opt.load('boost')
	opt.load('cuda')
#	opt.load('eclipse')

def configure(conf):
        print('configuring the project')

	#conf.find_icpc()
	conf.find_ar()
	conf.gxx_common_flags()
	#conf.gxx_modifier_platform()
	conf.cxx_load_tools()
	conf.cxx_add_flags()
	conf.link_add_flags()

#	conf.load('compiler_c')
	conf.env.append_value('LINKFLAGS', '-ldl')
	# shared lib graph-common path
	# bld.read_shlib('graph-common', paths='../graph-common/build')

	#conf.check(compiler='cxx', lib='boost_serialization', uselib_store='BSERIAL', mandatory=True)

	#conf.check_cfg(path='mpic++', args='--showme:compile --showme:link',
        #        package='', uselib_store='MPI_CH', mandatory=False)

	conf.load('compiler_cxx')
	conf.load('boost')
#        conf.check_boost(lib='serialization system filesystem timer program_options random mpi thread date_time log log_setup', mt=True)

	conf.path.ant_glob('**/*.cpp') # find all .cpp files

        #conf.env.append_value('LIBPATH', conf.env['/usr/lib64'])
	#conf.env.append_value('LIBPATH', conf.env['/opt/mpi/mpibull2-1.3.9-18.s/lib'])

	# the tests will fail if the libraries cannot be found
	# try pre_setting some variables, like this
	conf.env.LIBPATH_CUDA = ['/usr/local/cuda/lib64']
	conf.env.INCLUDES_CUDA = ['/usr/local/cuda/include']	
	# cuda config
	conf.load('cuda', tooldir='.')
	
	# check that we have 'cp'
	conf.find_program('cp', VAR='CP')

	conf.env.append_value('CXXFLAGS', '-DBOOST_ALL_DYN_LINK -DMPIBULL_IGNORE_CXX_SEEK -m64 -O3 -fPIC -pthread -Wl,-rpath=/scratch/ilscc/boost/lib -Wl,-rpath=/scratch/ilscc/libuuid/usr/lib64')
	
	pass

def build(bld):
	
	t = bld.stlib(
				features='cxx cxxprogram',
				cppflags  = ['-DBOOST_ALL_DYN_LINK', '-DMPIBULL_IGNORE_CXX_SEEK', '-m64', '-O3', '-fPIC', '-pthread', '-Wl,-rpath=/scratch/ilscc/boost/lib', '-Wl,-rpath=/scratch/ilscc/libuuid/usr/lib64'],
				
				linkflags = ['-Wl,-rpath=/scratch/ilscc/boost/lib', '-Wl,-rpath=/scratch/ilscc/libuuid/usr/lib64', '-DBOOST_ALL_DYN_LINK', '-DMPIBULL_IGNORE_CXX_SEEK', '-m64', '-O3', '-fPIC', '-pthread'],
				cudaflags = ["--ptxas-options=-v --compiler-options -arch sm_20 -use_fast_math -DBOOST_NOINLINE='__attribute__ ((noinline))'"], 
        		#rule='${NVCC} ${CXXFLAGS} ${SRC} ${CXXLNK_TGT_F} ${TGT}',
        		#includes=['build'],
        		source   = bld.path.ant_glob("src/**/*.cu src/**/*.cpp"),
        		includes = '. /prj/ilscc/boost/include /home_nfs/mlevorato/include /home/mario/include /usr/local/boost/include /home/levorato/include /usr/include /usr/include/mpi /opt/mpich2_p1/include /opt/mpi/mpibull2-1.3.9-18.s/include /usr/include/openmpi-x86_64 /usr/lib/openmpi/include/openmpi /usr/lib/openmpi/include ../graph-common/src /usr/local/cuda/include /opt/mpi/bullxmpi_gnu/1.2.8.4/include /prj/ilscc/mario.junior/libuuid/usr/include',
        		include = ['/usr/local/cuda/include'],
        		target='graspcc',
        		uselib='BSERIAL dl opa rt boost_serialization boost_system boost_filesystem boost_timer boost_program_options boost_random boost_mpi boost_thread boost_regex boost_atomic boost_date_time boost_log boost_log_setup cuda cudart curand',
                lib = ['dl', 'pthread', 'rt', 'uuid', 'mpi', 'mpi_cxx', 'boost_serialization', 'boost_system', 'boost_filesystem', 'boost_chrono', 'boost_timer', 'boost_program_options', 'boost_random', 'boost_mpi', 'boost_thread', 'boost_date_time', 'boost_log_setup', 'boost_regex', 'boost_atomic', 'boost_log', 'open-rte', 'open-pal', 'nsl', 'util', 'm', 'cuda', 'cudart', 'curand'],
                libpath = ['/prj/ilscc/boost/lib', '/home_nfs/mlevorato/lib', '/home/mario/lib', '/home/levorato/lib', '/usr/local/boost/lib', '/usr/lib', '/lib64', '/usr/lib64', '/usr/lib', '/usr/lib64/openmpi/lib', '/usr/lib/openmpi/lib', '/usr/lib64/mpich2/lib', '/opt/mpi/mpibull2-1.3.9-18.s/lib/pmi', '/opt/mpi/mpibull2-1.3.9-18.s/lib/drivers/osock', '/opt/mpi/mpibull2-1.3.9-18.s/lib', '/home_nfs/3.2.2.006/lib64', 'build', '/usr/local/cuda/lib64', '/opt/mpi/bullxmpi_gnu/1.2.8.4/lib', '/prj/ilscc/mario.junior/libuuid/usr/lib64'],
				stlib=['graph-common', 'cudadevrt'],
				stlibpath=[os.path.join(os.getcwd(), '../graph-common/build')],
        		use = 'CUDA CUDART') # -lcudadevrt
		
		#t.env.CUDAFLAGS = ['-deviceemu']
	t.env.CUDAFLAGS = ['-arch=sm_20']
		# --ptxas-options="-v -maxrregcount=10"
		
	bld(rule='${CP} ${SRC} ${TGT}', source='../graclus1.2/graclus', target='graclus')

def install(inst):

	inst.do_install(os.path.join(os.getcwd(), '../graclus1.2/graclus'), 'graclus', '755')
	pass
	
