# MovieLens dataset: http://grouplens.org/datasets/movielens/
# This script post-processes MovieLens signed graphs (generated by the python script),
# converting the user_ids to sequential vertex_ids and converting the edges to +1\-1 integers.

import sys, getopt
import csv
import StringIO
import glob
import os
import os.path
import argparse
import time
import math

# Global variables
EPS = 0.0001


def main(argv):
    csv.field_size_limit(1000000000)

    parser = argparse.ArgumentParser(description='This script post-processes MovieLens signed graphs (generated by the python script), converting the user_ids to sequential vertex_ids and converting the edges to +1\-1 integers.')
    parser.add_argument('folders', nargs='+',
                        help='the folders containing the signed graph (.g) files')
    parser.add_argument('--filefilter', default='.g', required=False,
                        help='the filename for MovieLens signed graph files (default: .g)')
    args = parser.parse_args()
    folders = args.folders
    filter = args.filefilter

    args = parser.parse_args()

    print 'Input folders are ', folders
    print 'File filter is ', filter

    processMovieLensSGFiles(folders, filter)


def processMovieLensSGFiles(folders, filter):
    for folder in folders:
        print "Processing folder " + ''.join(folder)

        for root, subFolders, files in os.walk(folder):
            # sort dirs and files
            subFolders.sort()
            files.sort()

            if len(files):
                file_list = [f for f in files if f.endswith(filter)]

                for file in file_list:
                    directory = root + os.sep + 'unweightedSG'
                    if not os.path.exists(directory):
                        os.makedirs(directory)

                    # measure elapsed time during graph generation
                    start = time.time()

                    file = os.path.join(root, file)
                    filename = file
                    print "Processing file " + filename
                    filename = filename[filename.rfind(os.sep) + 1:]
                    filename = filename + "-uw.g"
                    output_file = open(os.path.join(directory, filename), 'w')

                    try:
                        max_user_id = 0

                        # reads the contents of csv to pandas dataframe
                        content_file2 = open(file, 'r')
                        text_content = content_file2.read()
                        line_count = 0
                        current_vertex_id = 0
                        user_id_to_vertex_id = dict()
                        user_id = []
                        edge_list = []
                        for line in text_content.splitlines():
                            if line_count == 0:  # header => max_user_id and num_of_edges
                                cols = line.split('\t')
                                max_user_id = int(cols[0])
                                num_of_edges = int(cols[1])
                            else:
                                cols = line.split()
                                user_id_x = int(cols[0])
                                user_id_y = int(cols[1])
                                weight = float(cols[2])
                                int_weight = 0
                                if weight < 0:
                                    int_weight = -1
                                else:
                                    int_weight = 1

                                vertex_id_x = 0
                                if user_id_to_vertex_id.get(user_id_x) != None:
                                    vertex_id_x = user_id_to_vertex_id[user_id_x]
                                else:
                                    user_id_to_vertex_id[user_id_x] = current_vertex_id
                                    vertex_id_x = current_vertex_id
                                    user_id.append(user_id_x)
                                    current_vertex_id += 1
                                vertex_id_y = 0
                                if user_id_to_vertex_id.get(user_id_y) != None:
                                    vertex_id_y = user_id_to_vertex_id[user_id_y]
                                else:
                                    user_id_to_vertex_id[user_id_y] = current_vertex_id
                                    vertex_id_y = current_vertex_id
                                    user_id.append(user_id_y)
                                    current_vertex_id += 1

                                edge_list.append('{0} {1} {2}\r\n'.format(str(vertex_id_x), str(vertex_id_y), str(int_weight)))
                            line_count += 1
                        # end for

                        print "Successfully read input file, generating output file."

                        # writes the output file
                        #assert len(edge_list) == num_of_edges
                        output_file.write("{0}\t{1}\r\n".format(str(current_vertex_id), len(edge_list)))
                        for edge in edge_list:
                            output_file.write(edge)

                    finally:
                        content_file2.close()
                        output_file.close()
                    print "\nCreated output signed graph file {0}".format(filename)

                    print '\nGenerating user_id x vertex_id mapping file...'
                    filename = filename + "-vertex_id-user_id.csv"
                    with open(os.path.join(directory, filename), 'w') as output_file:
                        values = []
                        values.append("vertex_id, user_id\r\n")
                        for vertex_id in xrange(0, current_vertex_id):
                            values.append("{0}, {1}\r\n".format(str(vertex_id), str(user_id[vertex_id])))
                        for item in values:
                            output_file.write(item)
                    # end with
                    print 'Done.'

                    end = time.time()
                    elapsed = end - start
                    print "Graph conversion took {0:.2f} seconds.".format(elapsed)
                # end loop
                # process last file
            # process only the root folder
            break

        print "\nDone.\n"


if __name__ == "__main__":
    main(sys.argv[1:])
